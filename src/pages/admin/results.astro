---
import Layout from "@/layouts/Layout.astro";
import { ResultsTable } from "@/components/admin/ResultsTable";
import AdminNavigation from "@/components/admin/AdminNavigation.astro";
import { lucia } from "@/lib/auth";
import { db, desc, SurveyResponses, eq, MarketingSubscriber } from 'astro:db';

// Check authentication
const sessionId = Astro.cookies.get(lucia.sessionCookieName)?.value;
if (!sessionId) {
  return Astro.redirect("/admin/login");
}

// Validate session
try {
  const session = await lucia.validateSession(sessionId);
  if (session.fresh) {
    const sessionCookie = lucia.createSessionCookie(session.id);
    Astro.cookies.set(sessionCookie.name, sessionCookie.value, sessionCookie.attributes);
  }
  if (!session.user) {
    return Astro.redirect("/admin/login");
  }
} catch (e) {
  Astro.cookies.delete(lucia.sessionCookieName, { path: "/" });
  return Astro.redirect("/admin/login");
}

// Fetch survey results from the database
const rawResults = await db.select().from(SurveyResponses)
  .orderBy(desc(SurveyResponses.created_at))
  .all();

console.log("Raw results from database:", rawResults);

// Fetch marketing subscribers to cross-reference with survey results
const marketingSubscribers = await db.select().from(MarketingSubscriber).all();
console.log("Marketing subscribers:", marketingSubscribers);

// Create a set of marketing subscription emails for easy lookup
const marketingEmails = new Set(marketingSubscribers.map(sub => sub.email.toLowerCase()));
console.log("Marketing emails set:", marketingEmails);

// Parse the JSON strings for demographics and va_benefits
const results = rawResults.map(result => {
  // Log each raw result before processing
  console.log("Processing raw result:", result);
  console.log("Raw subscribe value:", result.subscribe, "Type:", typeof result.subscribe);
  console.log("Raw story_opt_in value:", result.story_opt_in, "Type:", typeof result.story_opt_in);
  
  // Check if the email is in the marketing subscribers list
  const isMarketingSubscriber = marketingEmails.has(result.email.toLowerCase());
  console.log(`Email ${result.email} marketing subscription status: ${isMarketingSubscriber}`);
  
  // Helper function to safely parse JSON or return empty object
  const safeParseJSON = (value) => {
    if (!value) return {};
    if (typeof value === 'object') return value;
    try {
      return JSON.parse(value);
    } catch (e) {
      console.error('Error parsing JSON:', e, 'Value:', value);
      return {};
    }
  };

  // Convert boolean values explicitly
  const processed = {
    ...result,
    // Force boolean values to be true booleans
    // For subscribe: also check if the email is in marketing database
    subscribe: isMarketingSubscriber || 
               result.subscribe === 1 || 
               String(result.subscribe) === "1" || 
               String(result.subscribe) === "true",
    story_opt_in: result.story_opt_in === 1 || 
                 String(result.story_opt_in) === "1" || 
                 String(result.story_opt_in) === "true",
    demographics: safeParseJSON(result.demographics),
    va_benefits: safeParseJSON(result.va_benefits)
  };
  
  // Log the processed result
  console.log("Processed result:", processed);
  console.log("Processed subscribe:", processed.subscribe, "Type:", typeof processed.subscribe);
  console.log("Processed story_opt_in:", processed.story_opt_in, "Type:", typeof processed.story_opt_in);
  
  return processed;
});

console.log("Survey results count:", results.length);
if (results.length > 0) {
  const firstResult = results[0];
  console.log("First result ID:", firstResult.id);
  console.log("Subscribe raw value:", firstResult.subscribe);
  console.log("Subscribe type:", typeof firstResult.subscribe);
  console.log("Story opt-in raw value:", firstResult.story_opt_in);
  console.log("Story opt-in type:", typeof firstResult.story_opt_in);
  console.log("First result (if exists):", JSON.stringify(firstResult));
} else {
  console.log("No results");
}

// User is authenticated, proceed with rendering

// Check for access denied message
const accessDenied = Astro.url.searchParams.get('access') === 'denied';
---

<Layout title="Admin - Survey Results" isLandingPage={false}>
  <AdminNavigation activePage="results" />
  
  <div class="container mx-auto px-4 pb-8">
    <div class="max-w-7xl mx-auto">
      <div class="flex justify-between items-center mb-8">
        <h1 class="text-3xl font-bold text-white">Survey Results Admin View</h1>
      </div>
      
      {accessDenied && (
        <div class="bg-amber-900 border border-amber-700 rounded-lg p-4 mb-6">
          <div class="flex items-center">
            <svg class="w-5 h-5 text-amber-300 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
            </svg>
            <span class="text-amber-300 font-medium">Access Restricted:</span>
            <span class="text-amber-200 ml-2">This participant did not consent to story sharing, so detailed responses are not accessible per privacy guidelines.</span>
          </div>
        </div>
      )}
      
      <div class="flex justify-between items-center mb-4">
        <p class="text-white">Total results: {results.length}</p>
        <p class="text-gray-400 text-sm">Use the "Download CSV" button to export all survey data</p>
      </div>
      <ResultsTable client:load initialResults={results} />
    </div>
  </div>
</Layout>
