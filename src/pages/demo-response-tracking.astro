---
import Layout from "@/layouts/Layout.astro";
import { db, Question } from "astro:db";

// Get a few sample questions for the demo
const sampleQuestions = await db.select().from(Question).limit(3);
---

<Layout title="Survey Response Tracking Demo" isLandingPage={false}>
  <div class="container mx-auto px-4 py-8 max-w-4xl">
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-white mb-4">Survey Response Tracking Demo</h1>
      <p class="text-gray-300">
        This demo shows how individual question responses are tracked with detailed analytics.
      </p>
    </div>

    <!-- Demo Survey Form -->
    <div class="bg-zinc-900 border border-zinc-800 rounded-lg p-8">
      <div id="tracking-info" class="mb-6 p-4 bg-blue-900/20 border border-blue-500/30 rounded">
        <h3 class="text-blue-300 font-semibold mb-2">üìä Tracking Information</h3>
        <div class="space-y-1 text-sm text-blue-200">
          <div>Session ID: <span id="session-id" class="font-mono">Not initialized</span></div>
          <div>Question: <span id="question-number">0</span> / 3</div>
          <div>Total Time: <span id="total-time">0s</span></div>
          <div>Question Time: <span id="question-time">0s</span></div>
        </div>
      </div>

      <form id="demo-survey-form">
        {sampleQuestions.map((question, index) => (
          <div 
            class={`question-section ${index === 0 ? '' : 'hidden'}`}
            data-question-id={question.id}
            data-question-text={question.text}
            data-category={question.category}
            data-axis={question.axis}
            data-index={index}
          >
            <div class="mb-6">
              <h2 class="text-xl font-semibold text-white mb-4">
                Question {index + 1} of {sampleQuestions.length}
              </h2>
              <p class="text-gray-300 mb-6">{question.text}</p>
              
              <div class="space-y-3">
                <p class="text-sm font-medium text-gray-300 mb-3">
                  How much do you agree with this statement?
                </p>
                {[1, 2, 3, 4, 5].map((value) => (
                  <label class="flex items-center space-x-3 cursor-pointer group">
                    <input 
                      type="radio" 
                      name={`question-${question.id}`}
                      value={value}
                      class="form-radio text-primary focus:ring-primary focus:ring-offset-gray-900"
                    />
                    <span class="text-gray-300 group-hover:text-white transition-colors">
                      {value === 1 && "Strongly Disagree"}
                      {value === 2 && "Disagree"}
                      {value === 3 && "Neutral"}
                      {value === 4 && "Agree"}
                      {value === 5 && "Strongly Agree"}
                    </span>
                  </label>
                ))}
              </div>
            </div>

            <div class="flex justify-between">
              <button 
                type="button" 
                class={`px-4 py-2 rounded text-gray-400 hover:text-white transition-colors ${
                  index === 0 ? 'invisible' : ''
                }`}
                onclick="previousQuestion()"
              >
                ‚Üê Previous
              </button>
              
              <button 
                type="button"
                class="px-6 py-2 bg-primary text-white rounded hover:bg-primary/80 transition-colors next-btn"
                onclick="nextQuestion()"
                disabled
              >
                {index === sampleQuestions.length - 1 ? 'Complete Demo' : 'Next ‚Üí'}
              </button>
            </div>
          </div>
        ))}

        <!-- Completion Message -->
        <div id="completion-message" class="hidden text-center py-8">
          <div class="bg-green-900/20 border border-green-500/30 rounded-lg p-6">
            <h3 class="text-2xl font-semibold text-green-300 mb-2">Demo Complete! üéâ</h3>
            <p class="text-green-200 mb-4">
              Your responses have been recorded with detailed analytics.
            </p>
            <div class="space-y-2 text-sm text-green-200">
              <div>Total Time: <span id="final-total-time" class="font-semibold"></span></div>
              <div>Average Response Time: <span id="avg-response-time" class="font-semibold"></span></div>
            </div>
            <div class="mt-6">
              <a 
                href="/admin/response-analytics" 
                class="inline-block px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors"
              >
                View Analytics Dashboard
              </a>
            </div>
          </div>
        </div>
      </form>
    </div>

    <div class="mt-8 bg-zinc-800 rounded-lg p-6">
      <h3 class="text-lg font-semibold text-white mb-4">üîç What's Being Tracked</h3>
      <div class="grid md:grid-cols-2 gap-6 text-sm">
        <div>
          <h4 class="font-medium text-blue-300 mb-2">Individual Question Data:</h4>
          <ul class="space-y-1 text-gray-300">
            <li>‚Ä¢ Question text and metadata</li>
            <li>‚Ä¢ Response value (1-5 scale)</li>
            <li>‚Ä¢ Time taken to answer</li>
            <li>‚Ä¢ Timestamp of response</li>
            <li>‚Ä¢ Question category and axis</li>
          </ul>
        </div>
        <div>
          <h4 class="font-medium text-green-300 mb-2">Session Analytics:</h4>
          <ul class="space-y-1 text-gray-300">
            <li>‚Ä¢ Total survey completion time</li>
            <li>‚Ä¢ Device type and browser info</li>
            <li>‚Ä¢ Completion rate and progress</li>
            <li>‚Ä¢ Drop-off points (if any)</li>
            <li>‚Ä¢ Average response times</li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { 
    initSurveyTracking, 
    startQuestionTiming, 
    recordQuestionResponse,
    getSessionInfo,
    clearSurveyTracking 
  } from '../lib/surveyResponseTracker.ts';

  let currentQuestionIndex = 0;
  let questionStartTime = Date.now();
  let responseTimes: number[] = [];
  
  // Initialize tracking
  const sessionId = initSurveyTracking();
  startQuestionTiming();
  
  // Update UI
  updateTrackingInfo();
  
  // Set up periodic updates
  setInterval(updateTrackingInfo, 1000);
  
  // Set up form interaction tracking
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('demo-survey-form');
    if (form) {
      form.addEventListener('change', handleAnswerSelection);
    }
  });
  
  function updateTrackingInfo() {
    const info = getSessionInfo();
    const sessionIdEl = document.getElementById('session-id');
    const questionNumEl = document.getElementById('question-number');
    const totalTimeEl = document.getElementById('total-time');
    const questionTimeEl = document.getElementById('question-time');
    
    if (sessionIdEl) sessionIdEl.textContent = info.sessionId || 'None';
    if (questionNumEl) questionNumEl.textContent = (info.currentQuestion + 1).toString();
    if (totalTimeEl) totalTimeEl.textContent = Math.floor(info.totalTime / 1000) + 's';
    if (questionTimeEl) {
      const questionTime = Math.floor((Date.now() - questionStartTime) / 1000);
      questionTimeEl.textContent = questionTime + 's';
    }
  }
  
  function handleAnswerSelection(event: Event) {
    const target = event.target as HTMLInputElement;
    if (target.type === 'radio') {
      // Enable next button when answer is selected
      const currentSection = document.querySelector('.question-section:not(.hidden)');
      const nextBtn = currentSection?.querySelector('.next-btn') as HTMLButtonElement;
      if (nextBtn) {
        nextBtn.disabled = false;
      }
    }
  }
  
  async function nextQuestion() {
    const currentSection = document.querySelector('.question-section:not(.hidden)') as HTMLElement;
    if (!currentSection) return;
    
    // Get the selected answer
    const questionId = currentSection.dataset.questionId!;
    const questionText = currentSection.dataset.questionText!;
    const category = currentSection.dataset.category!;
    const axis = currentSection.dataset.axis! as 'X' | 'Y';
    
    const selectedInput = currentSection.querySelector('input[type="radio"]:checked') as HTMLInputElement;
    if (!selectedInput) {
      alert('Please select an answer before continuing.');
      return;
    }
    
    const responseValue = parseInt(selectedInput.value);
    const responseTime = Date.now() - questionStartTime;
    responseTimes.push(responseTime);
    
    // Record the response
    await recordQuestionResponse({
      questionId,
      questionText,
      category,
      axis,
      responseValue,
      responseTimeMs: responseTime,
    });
    
    // Move to next question or complete
    currentQuestionIndex++;
    
    if (currentQuestionIndex >= 3) {
      // Show completion message
      currentSection.classList.add('hidden');
      const completionEl = document.getElementById('completion-message');
      if (completionEl) {
        completionEl.classList.remove('hidden');
        
        // Update final stats
        const finalTimeEl = document.getElementById('final-total-time');
        const avgTimeEl = document.getElementById('avg-response-time');
        
        if (finalTimeEl) {
          finalTimeEl.textContent = Math.floor(getSessionInfo().totalTime / 1000) + 's';
        }
        if (avgTimeEl) {
          const avgTime = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length;
          avgTimeEl.textContent = Math.floor(avgTime / 1000) + 's';
        }
      }
      
      // Clear tracking session
      setTimeout(() => {
        clearSurveyTracking();
      }, 5000);
      
    } else {
      // Show next question
      currentSection.classList.add('hidden');
      const nextSection = document.querySelector(`[data-index="${currentQuestionIndex}"]`);
      if (nextSection) {
        nextSection.classList.remove('hidden');
        questionStartTime = Date.now();
        startQuestionTiming();
      }
    }
  }
  
  function previousQuestion() {
    if (currentQuestionIndex <= 0) return;
    
    const currentSection = document.querySelector('.question-section:not(.hidden)');
    if (currentSection) {
      currentSection.classList.add('hidden');
    }
    
    currentQuestionIndex--;
    const prevSection = document.querySelector(`[data-index="${currentQuestionIndex}"]`);
    if (prevSection) {
      prevSection.classList.remove('hidden');
      questionStartTime = Date.now();
      startQuestionTiming();
    }
  }
  
  // Make functions global for onclick handlers
  (window as any).nextQuestion = nextQuestion;
  (window as any).previousQuestion = previousQuestion;
</script>
